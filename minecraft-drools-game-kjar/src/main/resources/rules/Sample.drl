package com.example
 
import org.drools.minecraft.model.*;
import org.drools.minecraft.model.Event;
import org.drools.minecraft.helper.CommandHelper;
import org.drools.minecraft.helper.TestHelper;
import java.util.*;


import java.util.ArrayList;

global CommandHelper cmds;
global TestHelper    tests;

rule "set up world"
    when
        $startupevent: Event(id == "Startup")
    then
        /*Room roomA = new Room($spawnpoint.getX() - 5, $spawnpoint.getY() - 5, $spawnpoint.getZ() - 5, $spawnpoint.getX() + 5, $spawnpoint.getY() + 5, $spawnpoint.getZ() + 5, "RoomA");
        cmds.notifyGenerateRoom(roomA);
            
        Room roomB = new Room($spawnpoint.getX() + 5, $spawnpoint.getY() - 5, $spawnpoint.getZ() - 5, $spawnpoint.getX() + 15, $spawnpoint.getY() + 5, $spawnpoint.getZ() + 5, "RoomB");
        cmds.notifyGenerateRoom(roomB);
            
        //create doors
        Door door = new Door($spawnpoint.getX() + 5, $spawnpoint.getY() - 4, $spawnpoint.getZ() - 1, $spawnpoint.getX() + 5, $spawnpoint.getY(), $spawnpoint.getZ() + 1, "ToRoomB");
        roomA.addDoor(door);
        cmds.notifyGenerateDoor(door);
            
        Door exitDoor = new Door($spawnpoint.getX() + 15, $spawnpoint.getY() - 4, $spawnpoint.getZ() - 1, $spawnpoint.getX() + 15, $spawnpoint.getY(), $spawnpoint.getZ() + 1, "ExitDoor");
        roomB.addDoor(exitDoor);
        cmds.notifyGenerateDoor(exitDoor);
            
        //create flag chest
        Chest chestA = new Chest("Chest A", new Location($spawnpoint.getX() - 4, $spawnpoint.getY() - 4, $spawnpoint.getZ() - 4));
        cmds.notifyGenerateChest(chestA);
		
		Key firstKey = new Key("RoomBKey");
		cmds.notifyItemToChest(chestA, firstKey);
            
        Chest chestB = new Chest("Chest B", new Location($spawnpoint.getX() + 6, $spawnpoint.getY() - 4, $spawnpoint.getZ() - 4));
        cmds.notifyGenerateChest(chestB);
		
		Key secondKey = new Key("ExitKey");
		cmds.notifyItemToChest(chestB, secondKey);
         
        //insert everything
        insert(roomA);
        insert(roomB);
        insert(door);
        insert(chestA);
        insert(chestB);
        insert(exitDoor);*/

        Chest chest = new Chest("Flag Chest", new Location(182, 94, -276));
        insert(chest);
        cmds.notifyGenerateChest(chest);
        BaseItem flag = new BaseItem("Flag", "banner");
	cmds.notifyItemToChest(chest, flag);

        Room scorezone_red = new Room(155, 94, -280, 151, 99, -272, "Scorezone_Red");
        insert(scorezone_red);

        Room scorezone_blue = new Room(209, 94, -272, 213, 99, -280, "Scorezone_Blue");
        insert(scorezone_blue);

        Room chasm = new Room(141, 80, -310, 228, 63, -253, "Chasm");
        insert(chasm);
        
        insert(new Team("red"));
        insert(new Team("blue"));
end

rule "Give blue a point when the flag enters the red scorezone"
    when
        $p : Player()
        $r: Room(id == "Scorezone_Blue" && playersInRoom contains $p.getName())
    then    
	System.out.println("Someone stepped in the blue scorezone");
end

rule "Give red a point when the flag enters the red scorezone"
    when
        $p : Player()
        $r: Room(id == "Scorezone_Red" && playersInRoom contains $p.getName())
    then    
	System.out.println("Someone stepped in the red scorezone");
end

rule "Teleport a player who hits the chasm"
    when
        $p : Player()
        $r: Room(id == "Chasm", playersInRoom contains $p.getName())
    then    
        cmds.notifyTeleportPlayer($p, new Location(182, 96, -276));
	System.out.println("Someone fell into the chasm");
end

rule "If a player has no team, assign him one."
    when
        $teamred : Team(id == "red")
        $teamblue : Team(id == "blue")
        $p : Player(!($teamred contains $p || $teamblue contains $p))
    then    
        if($teamred.size() <= $teamblue.size())
        {
            $teamred.add($p);
            System.out.println("Added player " + $p + " to team red!");
        }else
        {
            $teamblue.add($p);
            System.out.println("Added player " + $p + " to team blue!");
        }
        cmds.notifyTeleportPlayer($p, new Location(182, 96, -276));
	
end











/*
rule "show content of the room where the player is"
    when
        $p: Player()
        $r: Room(playersInRoom contains $p.getName())
    then
        for(WorldItem i : $r.getItems()){
            System.out.println(">>> Item: "+ i);
        }

        for(InventoryItem i : $p.getInventory()){
            System.out.println(">>> Inventory Item: "+ i);
        }
end

rule "Open the room b door when the player has the key matching that Door"
    when
        $p : Player()
        Key(name == "RoomBKey") from $p.getInventory()
        $d : Door(id == "ToRoomB", open == false)
        $r: Room(playersInRoom contains $p.getName(), doors contains $d)
    then    
		$d.setOpen(true);
		cmds.notifyOpenDoor($d);
end

rule "Open the exit door when the player has the key matching that Door"
    when
        $p : Player()
        Key(name == "ExitKey") from $p.getInventory()
        $d : Door(id == "ExitDoor", open == false)
        $r: Room(playersInRoom contains $p.getName(), doors contains $d)
    then    
		$d.setOpen(true);
		cmds.notifyOpenDoor($d);
end*/